import fs from "fs";
import path from "path";
import { ethers } from "ethers";

// ÂàõÂª∫ provider Âíå wallet
const provider = new ethers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL);
const wallet = new ethers.Wallet(process.env.SEPOLIA_PRIVATE_KEY!, provider);

async function main() {
    console.log("üåâ ÈÉ®ÁΩ≤Ë∑®Èìæ NFT ÂêàÁ∫¶...");
    console.log("=".repeat(50));

    // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
    const deployer = wallet;
    console.log("üë§ ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
    
    // Ëé∑ÂèñË¥¶Êà∑‰ΩôÈ¢ù
    const balance = await provider.getBalance(deployer.address);
    console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(balance), "ETH");

    // ËØªÂèñ CCIP ÈÖçÁΩÆ
    const ccipConfigPath = path.join(process.cwd(), "ccip-config.json");
    const ccipConfig = JSON.parse(fs.readFileSync(ccipConfigPath, "utf8"));
    
    // Ëé∑ÂèñÂΩìÂâçÁΩëÁªúÈÖçÁΩÆ
    const network = await provider.getNetwork();
    const chainId = Number(network.chainId);
    
    let networkConfig;
    for (const [networkName, config] of Object.entries(ccipConfig.networks)) {
        if ((config as any).chainId === chainId) {
            networkConfig = config as any;
            console.log("üåê ÂΩìÂâçÁΩëÁªú:", networkConfig.name);
            break;
        }
    }
    
    if (!networkConfig) {
        throw new Error(`‰∏çÊîØÊåÅÁöÑÁΩëÁªú Chain ID: ${chainId}`);
    }

    console.log("üìã ÁΩëÁªúÈÖçÁΩÆ:");
    console.log("   Chain Selector:", networkConfig.chainSelector);
    console.log("   CCIP Router:", networkConfig.router);
    console.log("   LINK Token:", networkConfig.linkToken);

    // ÈÉ®ÁΩ≤Ë∑®Èìæ NFT ÂêàÁ∫¶
    console.log("\nüé® ÈÉ®ÁΩ≤ CrossChainNFT ÂêàÁ∫¶...");
    
    // ËØªÂèñÂêàÁ∫¶ ABI Âíå Bytecode
    const artifactPath = path.join(process.cwd(), "artifacts/contracts/CrossChainNFT.sol/CrossChainNFT.json");
    const crossChainNFTArtifact = JSON.parse(fs.readFileSync(artifactPath, "utf8"));
    
    // ÂàõÂª∫ÂêàÁ∫¶Â∑•ÂéÇ
    const CrossChainNFTFactory = new ethers.ContractFactory(
        crossChainNFTArtifact.abi,
        crossChainNFTArtifact.bytecode,
        deployer
    );
    
    // ÈÉ®ÁΩ≤ÂêàÁ∫¶
    const crossChainNFT = await CrossChainNFTFactory.deploy(
        "Cross-Chain Auction NFT",
        "CCANFT",
        networkConfig.router,
        networkConfig.linkToken
    );
    
    await crossChainNFT.waitForDeployment();
    const nftAddress = await crossChainNFT.getAddress();
    
    console.log("‚úÖ CrossChainNFT ÈÉ®ÁΩ≤ÊàêÂäü!");
    console.log("   ÂêàÁ∫¶Âú∞ÂùÄ:", nftAddress);

    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        network: networkConfig.name,
        chainId: chainId,
        chainSelector: networkConfig.chainSelector,
        contracts: {
            CrossChainNFT: nftAddress
        },
        ccipConfig: {
            router: networkConfig.router,
            linkToken: networkConfig.linkToken
        },
        deployer: deployer.address,
        deployedAt: new Date().toISOString(),
        gasUsed: {
            CrossChainNFT: "‰º∞ÁÆó‰∏≠..."
        }
    };

    // ÂàõÂª∫ÈÉ®ÁΩ≤ÁõÆÂΩï
    const deploymentsDir = path.join(process.cwd(), "deployments");
    if (!fs.existsSync(deploymentsDir)) {
        fs.mkdirSync(deploymentsDir);
    }

    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    const deploymentFile = path.join(deploymentsDir, `crosschain-${networkConfig.name.toLowerCase().replace(/\s+/g, "-")}-${timestamp}.json`);
    fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));

    // ‰øùÂ≠òÊúÄÊñ∞ÈÉ®ÁΩ≤‰ø°ÊÅØ
    const latestFile = path.join(deploymentsDir, `crosschain-${networkConfig.name.toLowerCase().replace(/\s+/g, "-")}-latest.json`);
    fs.writeFileSync(latestFile, JSON.stringify(deploymentInfo, null, 2));

    console.log("\nüìÑ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:");
    console.log("   Êñá‰ª∂:", deploymentFile);

    // È™åËØÅÂêàÁ∫¶
    console.log("\nüîç Á≠âÂæÖÂå∫ÂùóÁ°ÆËÆ§ÂêéÈ™åËØÅÂêàÁ∫¶...");
    await crossChainNFT.deploymentTransaction()?.wait(5);

    console.log("‚ö†Ô∏è ÂêàÁ∫¶È™åËØÅË∑≥Ëøá - ÂèØ‰ª•Á®çÂêéÊâãÂä®È™åËØÅ");

    console.log("\nüéâ Ë∑®Èìæ NFT ÂêàÁ∫¶ÈÉ®ÁΩ≤ÂÆåÊàê!");
    console.log("=".repeat(50));
    console.log("üìã ÈÉ®ÁΩ≤ÊëòË¶Å:");
    console.log("   ÁΩëÁªú:", networkConfig.name);
    console.log("   CrossChainNFT:", nftAddress);
    console.log("   ÈÉ®ÁΩ≤ËÄÖ:", deployer.address);
    console.log("\nüîó Âú®Âå∫ÂùóÈìæÊµèËßàÂô®Êü•Áúã:");
    
    if (chainId === 11155111) { // Sepolia
        console.log("   https://sepolia.etherscan.io/address/" + nftAddress);
    } else if (chainId === 43113) { // Fuji
        console.log("   https://testnet.snowtrace.io/address/" + nftAddress);
    } else if (chainId === 80001) { // Mumbai
        console.log("   https://mumbai.polygonscan.com/address/" + nftAddress);
    }

    console.log("\nüìö ‰∏ã‰∏ÄÊ≠•:");
    console.log("1. Âú®ÂÖ∂‰ªñÊîØÊåÅÁöÑÁΩëÁªúÈÉ®ÁΩ≤Áõ∏ÂêåÂêàÁ∫¶");
    console.log("2. ‰ΩøÁî® setup-crosschain.ts ÈÖçÁΩÆË∑®Èìæ‰ø°‰ªªÂÖ≥Á≥ª");
    console.log("3. ‰∏∫ÂêàÁ∫¶ÂÖÖÂÄº LINK ‰ª£Â∏ÅÁî®‰∫éÊîØ‰ªòË∑®ÈìæË¥πÁî®");
    console.log("4. ÊµãËØïË∑®Èìæ NFT ‰º†ËæìÂäüËÉΩ");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });
